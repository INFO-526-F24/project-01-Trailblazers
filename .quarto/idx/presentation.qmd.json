{"title":"Predicting Healthcare Service Demands Using Simulated Data for Advanced Analytics","markdown":{"yaml":{"title":"Predicting Healthcare Service Demands Using Simulated Data for Advanced Analytics","subtitle":"INFO 526 - Fall 2023 - Project 1","author":"Anirudh Koganti, John Kang, Sai Hemanth, Shashank Kohade, Chaitanya Konda, Giridhar Kotha, Rohith","title-slide-attributes":{"data-background-image":"images/watercolour_sys02_img34_teacup-ocean.jpg","data-background-size":"stretch","data-background-opacity":"0.7","data-slide-number":"none"},"format":{"revealjs":{"theme":["data/customtheming.scss"]}},"editor":"visual","execute":{"echo":false}},"headingText":"Load packages here","containsRefs":false,"markdown":"\n\n```{r}\n#| label: load-packages\n#| include: false\n\npacman::p_load(tidymodels,\n               tidyverse,\n               here,\n               viridis,\n               glmnet,\n               ggplot2,\n               ranger,\n               openintro, \n               ggridges,  \n               lubridate,\n               dplyr,\n               gridExtra,\n               GGally,\n               corrplot,\n               reshape2,\n               e1071,\n               randomForest,\n               caret,\n               gbm\n               )\n\n```\n\n```{r}\n#| label: setup\n#| include: false\n\n# Plot theme\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))\n\n# For better figure resolution\nknitr::opts_chunk$set(\n  fig.retina = 3, \n  dpi = 300, \n  fig.width = 6, \n  fig.asp = 0.618 \n  )\n```\n\n```{r}\n#| label: load-data\n#| include: false\nhealthcare_data <- read.csv(here(\"data\", \"healthcare_dataset.csv\"))\n\nglimpse(data)\n```\n\n# Using Quarto for presentations\n\n## Quarto\n\n-   The presentation is created using the Quarto CLI\n\n-   `##` sets the start of a new slide\n\n## Layouts\n\nYou can use plain text\n\n::::: columns\n::: {.column width=\"40%\"}\n-   or bullet points[^1]\n:::\n\n::: {.column width=\"60%\"}\nor in two columns\n:::\n:::::\n\n[^1]: And add footnotes\n\n-   like\n\n-   this\n\n## Code\n\n```{r, echo=FALSE}\n#Data Cleaning-(Explaination needed in markdown)\n\n# Check for missing values and remove rows with NAs\nhealthcare_data <- healthcare_data %>%\n  filter_all(all_vars(!is.na(.)))\n\n# Remove duplicate rows\nhealthcare_data <- healthcare_data %>%\n  distinct()\n\n# Check and print data types of columns\nstr(healthcare_data)\n\n# Convert 'Date of Admission' and 'Discharge Date' to datetime format\nhealthcare_data$Date.of.Admission <- ymd(healthcare_data$Date.of.Admission)\nhealthcare_data$Discharge.Date <- ymd(healthcare_data$Discharge.Date)\n\n# Verify changes\nstr(healthcare_data)\n\n```\n\n## Plots\n\n## Gender Distribution\n\n```{r}\n\n# 1. Univariate Analysis\n# Group data by Gender and count the number of occurrences for each gender\ngender_count <- healthcare_data %>% \n  group_by(Gender) %>% \n  summarise(count = n())  # Summarize the counts for each gender\n\n# Plot Gender Distribution\nggplot(gender_count, aes(x = Gender, y = count, fill = Gender)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\", width = 0.6) +  # Create bar chart with specified bar width\n  geom_text(aes(label = count), vjust = -0.2, color = \"black\", size = 4) +  # Add data labels above bars\n  labs(\n    title = \"Gender Distribution\",  # Set chart title\n    x = \"Gender\",  # Set x-axis label\n    y = \"Count\"  # Set y-axis label\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 30000, by = 5000),  # Set y-axis tick marks at intervals of 5000\n    limits = c(0, 30000)  # Set y-axis limits to ensure it reaches 30000\n  ) +\n  theme(\n    legend.position = \"none\",  # Remove legend\n    axis.title.x = element_blank()  # Remove x-axis title for a cleaner look\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe graph represents the gender distribution of a dataset. It shows the counts of individuals grouped by gender (Female and Male). The counts for each gender are labeled above the bars:\n\nFemale: 27,470 individuals. Male: 27,496 individuals. The counts are nearly equal, indicating a balanced gender distribution in the dataset.\n\n## Distribution of Medical Conditions\n\n```{r}\n\n# Group data by Medical Condition and calculate the count of each condition\ncondition_count <- healthcare_data %>% \n  group_by(Medical.Condition) %>% \n  summarise(count = n())  # Summarize the counts for each condition\n\n# Plot Medical Condition Distribution\nggplot(condition_count, aes(x = Medical.Condition, y = count, fill = Medical.Condition)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\", width = 0.6) +  # Create a bar chart with specified bar width\n  geom_text(aes(label = count), vjust = -0.2, color = \"black\", size = 3) +  # Add labels above bars\n  theme_minimal() +  # Apply minimal theme for a clean look\n  labs(\n    title = \"Distribution of Medical Conditions\",  # Set chart title\n    x = \"Medical Condition\",  # Set x-axis label\n    y = \"Count\"  # Set y-axis label\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 10000, by = 2500),  # Set y-axis breaks at intervals of 2500\n    limits = c(0, 10000)  # Set y-axis limits to ensure it reaches 10000\n  ) +\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis label positioning\n    legend.position = \"none\"  # Remove legend\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart depicts the distribution of various medical conditions in the dataset. The counts for each condition are labeled above the bars: Arthritis: 9,218 cases. Asthma: 9,095 cases. Cancer: 9,140 cases. Diabetes: 9,216 cases. Hypertension: 9,151 cases. Obesity: 9,146 cases. The data indicates that all medical conditions have nearly similar counts, suggesting an evenly distributed representation of conditions in the dataset.\n\n## Blood Type Distribution\n\n```{r}\n\n# 1. Prepare data: Count the occurrences of each blood type\nblood_type_count <- healthcare_data %>%\n  count(Blood.Type, sort = TRUE) %>%  # Count each blood type and sort in descending order\n  rename(Category = Blood.Type, Count = n)  # Rename columns for clarity\n\n# 2. Plot Blood Type Distribution with count as text on each bar\nggplot(blood_type_count, aes(x = reorder(Category, Count), y = Count, fill = Category)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\", show.legend = FALSE, width = 0.6) +  # Create horizontal bars\n  geom_text(aes(label = Count), hjust = -0.2, color = \"black\", size = 3) +  # Add text labels for counts\n  coord_flip() +  # Flip coordinates for a horizontal bar chart\n  labs(\n    title = \"Blood Type Distribution\",  # Set chart title\n    x = \"Blood Type\",  # Set x-axis label\n    y = \"Count\"  # Set y-axis label\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),  # Center-align and bold title\n    axis.title.x = element_text(face = \"bold\"),  # Bold x-axis title\n    axis.title.y = element_text(face = \"bold\"),  # Bold y-axis title\n    axis.text = element_text(size = 10),  # Set size of axis text\n    axis.text.x = element_text(vjust = 4, hjust = 0.5)  # Adjust x-axis text for clarity\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 8000, by = 2000),  # Set y-axis ticks at intervals of 2000\n    limits = c(0, 8000)  # Ensure y-axis limits reach 8000\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart represents the distribution of different blood types within the dataset. Each bar corresponds to a blood type, and the counts are displayed as text beside the bars: A-: 6,898 individuals A+: 6,896 individuals B+: 6,885 individuals AB+: 6,882 individuals AB-: 6,874 individuals B-: 6,872 individuals O+: 6,855 individuals O-: 6,804 individuals The data suggests that all blood types have relatively similar counts, with small variations. A- is the most frequent blood type, while O- is the least.\n\n## Test Results Distribution Plot\n\n```{r}\n\n# 1. Count occurrences of each test result category\ntest_results_count <- healthcare_data %>%\n  group_by(Test.Results) %>%  # Group data by 'Test.Results'\n  summarise(count = n())  # Count the occurrences of each test result category\n\n# 2. Plot the distribution of test results\nggplot(test_results_count, aes(x = Test.Results, y = count, fill = Test.Results)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\") +  # Create bars with height based on counts\n  geom_text(aes(label = count), vjust = -0.2, color = \"black\", size = 3.5) +  # Add count as text above each bar\n  labs(\n    title = \"Test Results Distribution\",  # Title of the chart\n    x = \"Test Results\",  # Label for the x-axis\n    y = \"Count\"  # Label for the y-axis\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 20000, by = 5000),  # Set y-axis ticks at intervals of 5000\n    limits = c(0, 20000)  # Set y-axis limits to accommodate data range\n  ) +\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5)  # Adjust x-axis text for better readability\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart displays the distribution of test results from the dataset. Each bar represents a category of test results, and the height indicates the count of occurrences for that category. The exact count is displayed on top of each bar for better readability.\n\nFrom the chart: It is possible to determine which test result category is most or least frequent. The y-axis is scaled to a maximum of 20,000, with intervals of 5,000, providing an appropriate scale for interpretation.\n\n## Age Group Distribution of Patients\n\n```{r}\n\n# Load the knitr package\nlibrary(knitr)  # For displaying the results in a neat table format\n\n# 1. Create Age Groups\nhealthcare_data <- healthcare_data %>%  # Modify the healthcare_data dataset\n  mutate(Age_Group = case_when(  # Add a new column 'Age_Group'\n    Age >= 0 & Age <= 18 ~ \"0-18\",  # Assign \"0-18\" for ages 0 to 18\n    Age >= 19 & Age <= 35 ~ \"19-35\",  # Assign \"19-35\" for ages 19 to 35\n    Age >= 36 & Age <= 50 ~ \"36-50\",  # Assign \"36-50\" for ages 36 to 50\n    Age >= 51 & Age <= 65 ~ \"51-65\",  # Assign \"51-65\" for ages 51 to 65\n    Age > 65 ~ \"65+\",  # Assign \"65+\" for ages above 65\n    TRUE ~ \"Unknown\"  # Assign \"Unknown\" for any other cases (e.g., missing or invalid data)\n  ))\n\n# 2. Count Patients in Each Age Group\nage_group_count <- healthcare_data %>%  # Use the modified dataset\n  group_by(Age_Group) %>%  # Group by the 'Age_Group' column\n  summarise(Count = n(), .groups = 'drop')  # Count the number of patients in each age group\n\n# 3. Display Results in a Table\ncat(\"### Age Group Distribution\\n\")  # Add a heading for the results\nknitr::kable(age_group_count, caption = \"Age Group Distribution of Patients\")  # Display the table neatly using knitr\n\n```\n\n## Interpretation of the Results\n\nThe table provides a summary of the distribution of patients across different age groups. The age groups are defined as: 0-18 years: Representing children and adolescents. 19-35 years: Representing young adults. 36-50 years: Representing middle-aged individuals. 51-65 years: Representing older adults nearing retirement age. 65+ years: Representing the elderly population. The counts in the table allow us to analyze which age group has the highest or lowest number of patients, helping identify trends in patient demographics. This can assist healthcare providers in tailoring age-specific services or interventions.\n\n## Age Distribution by Medical Condition\n\n```{r}\n# Multi-variate Analysis\n# Boxplot for Age by Medical Condition\n\nggplot(healthcare_data, aes(x = Medical.Condition, y = Age, fill = Medical.Condition)) +  # Map medical condition to x-axis, age to y-axis, and fill colors\n  geom_boxplot() +  # Add a boxplot to visualize the age distribution for each condition\n  \n  stat_summary(fun.y = \"mean\", geom = \"point\", shape = 3, size = 4, color = \"black\") +  # Add 'X' marker for mean age\n  theme_minimal() +  # Apply minimal theme for cleaner visuals\n  labs(\n    title = \"Age Distribution by Medical Condition\",  # Set the title\n    x = \"Medical Condition\",  # Label the x-axis\n    y = \"Age\"  # Label the y-axis\n  ) + \n  scale_y_continuous(\n    breaks = seq(0, 100, by = 25),  # Add y-axis ticks at intervals of 25\n    limits = c(0, 100)  # Set the y-axis range from 0 to 100\n  ) +  \n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis label position for readability\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),  # Center and bold the plot title\n    axis.title = element_text(face = \"bold\")  # Bold the axis titles\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe boxplot represents the distribution of patients' ages across various medical conditions. Key insights include:\n\nBoxplot Details:\n\nThe box shows the interquartile range (IQR), representing the middle 50% of ages for each medical condition. The horizontal line inside the box represents the median age for each condition. Whiskers extend to the smallest and largest values within 1.5 times the IQR, and points outside these whiskers are considered outliers. Jittered Points:\n\nThe scatter points (jitter) overlay the boxplot to show individual patient ages, providing more granular data visibility. Mean Indication:\n\nA black 'X' marker (mean point) is added for each medical condition, offering a quick comparison of average age. General Trends:\n\nVariations in age distribution across medical conditions can indicate if specific conditions are more common among certain age groups. For example, conditions like arthritis or hypertension may have higher age medians compared to asthma or diabetes, which could indicate age-related trends.\n\n## Admission Type by Medical Condition\n\n```{r}\n\n# Count the number of occurrences of each combination of 'Medical.Condition' and 'Admission.Type'\ncondition_admission_count <- healthcare_data %>%\n  group_by(Medical.Condition, Admission.Type) %>%  # Group data by medical condition and admission type\n  summarise(count = n(), .groups = 'drop')  # Count the number of occurrences for each group\n\n# Plot using ggplot\nggplot(condition_admission_count, aes(x = Medical.Condition, y = count, fill = Admission.Type)) +  # Map variables for plotting\n  geom_bar(stat = \"identity\", position = \"dodge\") +  # Use grouped bar chart to separate bars by admission type\n  labs(\n    title = \"Admission Type by Medical Condition\",  # Add title to the graph\n    x = \"Medical Condition\",  # Label x-axis\n    y = \"Count\",  # Label y-axis\n    fill = \"Admission Type\"  # Legend title for the fill aesthetic\n  ) +\n  theme_minimal() +  # Use minimal theme for a clean appearance\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis text for better readability\n    plot.title = element_text(hjust = 0.5),  # Center-align the plot title\n    legend.position = \"top\"  # Position the legend at the top for easier interpretation\n  ) +\n  geom_text(\n    aes(label = count),  # Display counts on the bars\n    position = position_dodge(width = 0.8),  # Adjust text position to align with grouped bars\n    vjust = -0.3,  # Position text slightly above the bars\n    color = \"black\", size = 2.25  # Set text color and size for readability\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 3200, by = 800),  # Define y-axis breaks at intervals of 800\n    limits = c(0, 3200)  # Set y-axis range from 0 to 3200\n  )\n\n```\n\n## Interpretation of the Graph\n\nThis grouped bar chart visualizes the relationship between medical conditions and admission types, providing the following insights:\n\nAdmission Type Breakdown: For each medical condition, bars represent counts of different admission types (e.g., Emergency, Elective, or Urgent). The dodge position ensures clear separation between bars for easier comparison across admission types.\n\nKey Observations: Certain conditions like Hypertension or Diabetes may have higher counts for specific admission types, such as Emergency. Elective admissions may dominate planned medical conditions such as Obesity-related procedures. Urgent admissions might be fewer overall, reflecting their specialized and immediate nature.\n\nPractical Implications: Hospitals can use this data to allocate resources appropriately based on admission patterns for different conditions. Identifying conditions with higher emergency admissions can guide emergency preparedness.\n\n```{r}\n#NEW PLOT\n# Bar plot of count of patients for each doctor by hospital\n\n```\n\n## Medical Conditions by Blood Type\n\n```{r}\n\n# Count the number of occurrences of each combination of 'Blood.Type' and 'Medical.Condition'\nblood_condition_count <- healthcare_data %>%\n  group_by(Blood.Type, Medical.Condition) %>%  # Group data by blood type and medical condition\n  summarise(count = n(), .groups = 'drop')  # Count the number of occurrences for each group\n\n# Plot using ggplot\nggplot(blood_condition_count, aes(x = Blood.Type, y = count, fill = Medical.Condition)) +  # Map variables for plotting\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Use stacked bar chart to display medical conditions within each blood type\n  labs(\n    title = \"Medical Conditions by Blood Type\",  # Add title to the graph\n    x = \"Blood Type\",  # Label x-axis\n    y = \"Count\",  # Label y-axis\n    fill = \"Medical Condition\"  # Legend title for the fill aesthetic\n  ) +\n  theme_minimal() +  # Use minimal theme for a clean appearance\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis text for better readability\n    plot.title = element_text(hjust = 0.5),  # Center-align the plot title\n    legend.position = \"right\"  # Position the legend on the right side of the chart\n  ) +\n  geom_text(\n    aes(label = count),  # Display counts within the stacked bars\n    position = position_stack(vjust = 0.5),  # Position text at the center of each stack\n    color = \"black\", size = 2.5  # Set text color and size for readability\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 8000, by = 2000),  # Define y-axis breaks at intervals of 2000\n    limits = c(0, 8000)  # Set y-axis range from 0 to 8000\n  )\n\n```\n\n## Interpretation of the Graph\n\nThis stacked bar chart illustrates the distribution of medical conditions across different blood types, providing the following insights:\n\nBlood Type Analysis: The bars represent the total count of individuals for each blood type, with subdivisions indicating various medical conditions. The stacking highlights how medical conditions are distributed within each blood type.\n\nMedical Condition Contribution: Certain blood types (e.g., O+, A+) may show higher overall counts, reflecting their prevalence in the dataset. Specific medical conditions may dominate for certain blood types, indicating potential associations between medical conditions and blood types.\n\nKey Observations: Blood types such as O- or AB- might have lower overall counts, which aligns with their rarity in the general population. The composition of medical conditions within each blood type is relatively consistent, with a few exceptions.\n\nPractical Implications: This chart is useful for identifying whether certain blood types are more prone to specific medical conditions. Healthcare providers can use this data for personalized care, especially in conditions where blood type may have clinical relevance.\n\n## Yearly Revenue Summary and Validation\n\n```{r}\n\n# Ensure the Date.of.Admission column is in Date format\nhealthcare_data$Date.of.Admission <- as.Date(healthcare_data$Date.of.Admission, format = \"%Y-%m-%d\")  \n# Convert the Date.of.Admission column to Date format for accurate date-based operations.\n\n# Extract year from the Date.of.Admission column\nhealthcare_data <- healthcare_data %>%\n  mutate(Year = format(Date.of.Admission, \"%Y\"))  \n# Create a new column 'Year' to store the year extracted from Date.of.Admission.\n\n# Summarize revenue by year\nyearly_revenue <- healthcare_data %>%\n  group_by(Year) %>%  # Group data by year\n  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%  \n  # Calculate the total revenue for each year, ignoring missing values.\n  mutate(total_revenue_millions = total_revenue / 1e6)  \n  # Convert revenue values to millions for readability.\n\n# Print the summarized revenue to verify the calculation\nprint(yearly_revenue)  \n# Display the yearly revenue summary to verify results.\n\n# Verify conversion to millions\nhealthcare_data %>%\n  group_by(Year) %>%  # Group data by year\n  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE)) %>%  \n  # Recalculate total revenue for each year.\n  mutate(manual_check_millions = total_revenue / 1e6)  \n  # Manually verify the conversion to millions.\n\n```\n\n## Interpretation of the Code\n\nThis code calculates and validates the total yearly revenue from healthcare services based on patient admissions. The following insights are derived:\n\nDate Handling: The Date.of.Admission column is converted to the Date format to enable accurate date-based analysis. The Year is extracted from the admission dates to facilitate grouping and summarizing data by year.\n\nRevenue Calculation: The total revenue (Billing.Amount) is calculated for each year. Revenue values are converted to millions for easier interpretation and reporting.\n\nValidation: A manual check is included to validate the conversion of revenue to millions, ensuring accurate computations.\n\nPractical Utility: This information can help identify trends in revenue over the years, which may reflect changes in patient volume, service costs, or healthcare policies.\n\n## Yearly Revenue Trend Analysis\n\n```{r}\n\n# Ensure the Date.of.Admission column is in Date format\nhealthcare_data$Date.of.Admission <- as.Date(healthcare_data$Date.of.Admission, format = \"%Y-%m-%d\")  \n# Convert the 'Date.of.Admission' column to Date format to allow for correct date manipulation.\n\n# Extract year from the Date.of.Admission column\nhealthcare_data <- healthcare_data %>%\n  mutate(Year = format(Date.of.Admission, \"%Y\"))  \n# Create a new column 'Year' by extracting the year from the 'Date.of.Admission' column.\n\n# Summarize revenue by year\nyearly_revenue <- healthcare_data %>%\n  group_by(Year) %>%  # Group data by year\n  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%  \n  # Calculate the total revenue for each year, ignoring missing values with 'na.rm = TRUE'.\n  mutate(total_revenue_millions = total_revenue / 1e6)  \n  # Convert the total revenue into millions for better readability.\n\n# Plot the yearly revenue as a line graph\nggplot(yearly_revenue, aes(x = Year, y = total_revenue_millions, group = 1)) +\n  geom_line(color = \"blue\", size = 1) +  # Draw the line connecting points, color blue and size 1\n  geom_point(color = \"red\", size = 2) +  # Add red points to mark the actual data values\n  geom_text(aes(label = round(total_revenue_millions, 2)), hjust=1.2,vjust = -0.5, color = \"black\", size = 2.5) +  \n  # Add text labels with the exact revenue value rounded to 2 decimal places, positioned above the points\n  labs(title = \"Yearly Revenue in Millions\",  # Add title and axis labels\n       x = \"Year\", \n       y = \"Revenue (Millions)\") +\n  theme_minimal() +  # Use minimal theme for a clean look\n  theme(axis.text.x = element_text(size = 10),  # Customize x-axis label size for better readability\n        plot.title = element_text(hjust = 0.5)) +  # Center-align the plot title\n  scale_y_continuous(breaks = seq(0, 300, by = 60), limits = c(0, 300))  \n  # Adjust y-axis to show revenue in millions from 0 to 300 million with breaks every 60 million\n\n```\n\n## Interpretation of the Graph\n\nThe Yearly Revenue Trend line graph displays the total revenue (in millions) generated by healthcare services across different years. Here's what can be inferred: The blue line indicates the trend in total revenue over time, showing increases or decreases in revenue each year. Red points mark the revenue for each year, highlighting individual data points for clarity. Text labels above each red point provide the exact value of the revenue (in millions) for each corresponding year. The y-axis represents the revenue in millions, and the x-axis corresponds to the years. The overall trend in the graph could reveal periods of revenue growth, decline, or consistency, which may be linked to healthcare events, policy changes, or economic factors.\n\nThis graph can be used to assess financial performance over time, identify any significant changes, and inform decision-making for future strategies.\n\n## Research Questions: \n\n### RQ-1. How does total and average medical revenue vary across different age groups, and what is the proportional contribution of each age group to the overall medical revenue?\n\nThe analysis shows that older age groups, particularly those aged 65 and above, contribute the most to total medical revenue, generating $409.3M, or 29.2% of the overall revenue. This is followed by the 19–35, 51–65, and 36–50 age groups, which also make significant contributions. In contrast, the 0–18 age group accounts for only $23.7M, making up just 1.7% of the total revenue.\n\nInterestingly, the average medical revenue per person is fairly consistent across all age groups, ranging from $25.4K to $26.7K, with the 0–18 group having a slightly higher average despite its lower total contribution. This suggests that specialized or targeted medical services for younger individuals may drive higher per-person costs.\n\nThe pie chart further highlights the proportional revenue contributions, with older populations, particularly those aged 65+, dominating the share. The variability in medical expenditures is also evident from the box plot, with higher costs and outliers more common in older age groups like 51–65 and 65+.\n\nOverall, this analysis underscores the significant impact of older populations on healthcare revenue, reflecting their higher healthcare needs. It also suggests that younger age groups, while contributing less overall, might incur higher average costs due to specialized care. These insights can guide resource allocation and healthcare planning.\n\n\n\n## Total Medical Revenue by Age Group (in Millions)\n\n```{r}\n\n# Calculate total revenue per age group\nage_group_revenue <- healthcare_data %>%\n  group_by(Age_Group) %>%  # Group the data by Age_Group\n  summarise(Total_Revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%  \n  # Sum the billing amount for each age group, ignoring NA values with 'na.rm = TRUE'.\n  mutate(Total_Revenue_Million = Total_Revenue / 1e6)  # Convert the revenue into millions for readability\n\n# Display the results in a neat format using knitr\ncat(\"### Age Group Revenue Distribution (in Millions)\\n\")  \n# Print the heading for the table in markdown format\nknitr::kable(age_group_revenue, caption = \"Total Revenue by Age Group (in Millions)\")  \n# Display the summarized revenue per age group using knitr for neat tabular output\n\n# Create a bar plot for revenue distribution by age group with \"M\" suffix\nggplot(age_group_revenue, aes(x = Age_Group, y = Total_Revenue_Million, fill = Age_Group)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Create a bar plot with one bar for each age group\n  geom_text(aes(label = paste0(round(Total_Revenue_Million, 1), \"M\")),  # Add text labels above the bars\n            vjust = -0.5, color = \"black\", size = 3) +  # Adjust label position and appearance\n  labs(title = \"Total Medical Revenue by Age Group (in Millions)\",  # Add title and axis labels\n       x = \"Age Group\", \n       y = \"Total Revenue (in Millions)\") +\n  theme(axis.text.x = element_text(vjust = 4, hjust=0.5),  # Rotate x-axis labels for better readability\n        plot.title = element_text(hjust = 0.5)) +  # Center align the title\n  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = \"M\"), limits = c(0, 500))  \n  # Format the y-axis to show the revenue in millions, with a \"M\" suffix and a limit for clarity\n\n```\n\n## Interpretation of the Graph\n\nThe Total Medical Revenue by Age Group bar graph displays the sum of revenue generated by healthcare services, categorized by different age groups, with the values represented in millions. Here's what can be inferred: Each bar represents the total medical revenue (in millions) generated by patients within a particular age group. The labels on top of the bars indicate the exact revenue value in millions, with the \"M\" suffix added for clarity. Age Groups are represented on the x-axis, and the total revenue (in millions) is represented on the y-axis. The height of the bars shows how much revenue is generated by each age group, and the differences in bar heights indicate which age groups contribute the most to the total revenue. The graph helps in identifying which age groups are more lucrative for the healthcare system in terms of medical billing.\n\n## Proportion of Total Revenue by Age Group (in Millions)\n\n```{r}\n\n# Pie chart of Total Revenue by Age Group with Percentages\nggplot(age_group_revenue, aes(x = \"\", y = Total_Revenue_Million, fill = Age_Group)) +  # Create pie chart with filled segments based on Age Group\n  geom_bar(stat = \"identity\", width = 1) +  # Make the bars form a complete circle for the pie chart\n  coord_polar(theta = \"y\") +  # Convert the bar plot into a pie chart by polar coordinates\n  labs(title = \"Proportion of Total Revenue by Age Group (in Millions)\") +  # Add title to the chart\n  theme(axis.text.x = element_blank(),  # Remove x-axis labels since they are not needed for pie chart\n        plot.title = element_text(hjust = 0.5)) +  # Center the title\n  geom_text(aes(label = paste0(round(Total_Revenue_Million / sum(Total_Revenue_Million) * 100, 1), \"%\")), \n            position = position_stack(vjust = 0.5), color = \"white\")  # Add percentage labels inside each pie segment\n\n```\n\n## Interpretation of the Graph\n\nThe pie chart of Total Revenue by Age Group displays how the total revenue is distributed across various age groups. Here's the key interpretation: Each slice of the pie represents a different age group, and the size of the slice corresponds to the revenue generated by that age group (in millions). The percentage labels on the pie segments show what proportion of the total revenue is contributed by each age group. The percentage is calculated by dividing the revenue for a specific age group by the total revenue and multiplying by 100. Larger slices indicate age groups that contribute more to the overall revenue, while smaller slices represent age groups with a lower revenue contribution. The chart provides a visual comparison of revenue contributions from different age groups, making it easy to see which groups are the most lucrative.\n\n## Medical Expenditure by Age Group\n\n```{r}\n\n# Box plot: Medical Expenditure by Age Group\nggplot(healthcare_data, aes(x = Age_Group, y = Billing.Amount, fill = Age_Group)) +  # Create box plot with Billing Amount on y-axis and Age Group on x-axis\n  geom_boxplot() +  # Adds the box plot to visualize the distribution of medical expenditure\n  labs(\n    title = \"Medical Expenditure by Age Group\",  # Add the title of the plot\n    x = \"Age Group\",  # Label for x-axis\n    y = \"Medical Expenditure ($)\"  # Label for y-axis with dollar symbol\n  ) + \n  theme(\n    axis.text.x = element_text(vjust = 0.5),  # Adjust x-axis label positioning\n    plot.title = element_text(hjust = 0.5)  # Center title\n  ) +\n  scale_y_continuous(\n    labels = scales::label_number(big.mark = \",\", prefix = \"$\")  # Format y-axis labels with commas and dollar symbol\n  )\n\n\n```\n\n## Interpretation of the Graph\n\nThe box plot of Medical Expenditure by Age Group illustrates the distribution of medical expenditures across different age groups. Here's the key interpretation:\n\nBox Plots: Each box represents the distribution of medical expenditure for an age group. The top and bottom of the box represent the upper and lower quartiles (i.e., the 75th and 25th percentiles), with the line in the middle of the box representing the median (50th percentile).\n\nWhiskers: The lines extending from the boxes represent the range of the data, capturing values within 1.5 times the interquartile range from the quartiles. Data points outside this range are considered outliers and are plotted as individual dots.\n\nAge Group Comparisons: By looking at the boxes and their ranges, you can compare the median medical expenditures for different age groups. If an age group has a larger interquartile range, it indicates a greater variability in medical expenses within that group.\n\nInterpretation for Retirement: Higher expenditures in older age groups might suggest that people in these groups are more likely to need higher medical expenses in retirement. This can imply that fewer people in these age groups will be able to fully support themselves without medical insurance or additional support post-retirement.\n\n## Average Medical Revenue by Age Group (in Thousands)\n\n```{r}\n\n# Calculate average revenue per age group in thousands (K)\nage_group_avg_revenue <- healthcare_data %>%\n  group_by(Age_Group) %>%\n  summarise(Average_Revenue = mean(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%\n  mutate(Average_Revenue_K = Average_Revenue / 1e3)  # Convert to thousands (K)\n\n# Display the results in a neat format using knitr\ncat(\"### Age Group Average Revenue Distribution (in Thousands)\\n\")\nknitr::kable(age_group_avg_revenue, caption = \"Average Revenue by Age Group (in Thousands)\")\n\n# Create a bar plot for average revenue distribution by age group in K\nggplot(age_group_avg_revenue, aes(x = Age_Group, y = Average_Revenue_K, fill = Age_Group)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Creates bars based on average revenue\n  geom_text(aes(label = paste0(round(Average_Revenue_K, 1), \"K\")),  # Labels the bars with revenue in thousands\n            vjust = -0.5, color = \"black\", size = 3) +  # Adjusts label position\n  labs(title = \"Average Medical Revenue by Age Group (in Thousands)\",  # Title of the plot\n       x = \"Age Group\",  # X-axis label\n       y = \"Average Revenue (in K)\") +  # Y-axis label\n  theme(axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjusts x-axis labels for readability\n        plot.title = element_text(hjust = 0.5)) +  # Centers the title\n  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = \"K\"),limits = c(0, 30))  # Formats the y-axis in thousands and sets axis limits\n\n\n```\n\n## Interpretation of the Graph\n\nThe bar plot of Average Medical Revenue by Age Group (in Thousands) visualizes the average medical revenue (in thousands) generated from each age group. Here's the interpretation:\n\nBars: Each bar represents the average revenue for a given age group. The height of the bar reflects how much, on average, each age group contributes to the total medical revenue. The values are displayed in thousands (K) for better readability.\n\nAge Group Insights: By observing the height of the bars, we can compare how different age groups contribute to medical revenue on average. Age groups with higher bars contribute significantly more to medical revenue, while age groups with lower bars contribute less.\n\nRevenue Distribution: The chart helps to identify which age groups generate the most medical revenue on average, which may be valuable for understanding healthcare utilization patterns and planning medical services and resources for different age groups.\n\n\n\n###  RQ-2. What factors contribute most to higher billing amounts? Importance: Insights here can inform healthcare cost optimization and insurance claimprocesses.\n\nThe factors contributing most to higher billing amounts, based on the provided graphs and analysis, include:\n\nAdmission Type: Emergency and urgent admissions have slightly higher average billing amounts compared to elective admissions. This reflects the additional complexity and immediacy of care associated with unplanned or critical treatments.\n\nAge Group: Older populations, particularly those aged 65+, generate the highest total billing amounts due to increased healthcare needs and more frequent utilization of medical services.\n\nMedications: High total billing amounts are observed for widely used or essential medications like Ibuprofen, Lipitor, and Aspirin, indicating their frequent prescription or high associated costs.\n\nThese insights are crucial for healthcare providers and insurers to optimize costs by focusing on improving efficiency in emergency care, targeting preventive measures for older age groups, and evaluating the cost-effectiveness of commonly prescribed medications.\n\n\n## Average Billing Amount by Admission Type\n\n```{r}\n\n# Calculate average billing by Admission Type\nbilling_by_admission <- healthcare_data %>%\n  group_by(Admission.Type) %>%  # Group data by admission type\n  summarise(mean_billing = mean(Billing.Amount, na.rm = TRUE))  # Calculate the mean billing amount for each group, ignoring missing values\n\n# Plot average billing amount by Admission Type\nggplot(billing_by_admission, aes(x = Admission.Type, y = mean_billing, fill = Admission.Type)) +  # Map admission type to x-axis and mean billing to y-axis\n  geom_bar(stat = \"identity\") +  # Use bar chart to show mean billing\n  geom_text(\n    aes(label = scales::label_number(big.mark = \",\", accuracy = 0.01, prefix = \"$\")(mean_billing)),  # Display formatted mean billing with commas and 2 decimals\n    vjust = -0.3,  # Adjust vertical positioning of the labels above the bars\n    color = \"black\", size = 3  # Set text color and size\n  ) +\n  labs(\n    title = \"Average Billing Amount by Admission Type\",  # Add title to the graph\n    x = \"Admission Type\",  # Label the x-axis\n    y = \"Average Billing Amount ($)\"  # Label the y-axis with currency symbol\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 30000, by = 10000),  # Define y-axis breaks at intervals of 10,000\n    limits = c(0, 30000),  # Set the y-axis range from 0 to 30,000\n    labels = scales::label_number(big.mark = \",\", accuracy = 0.01, prefix = \"$\")  # Format y-axis labels with commas and 2 decimals\n  ) +\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5)  # Adjust x-axis text positioning for better readability\n  )\n\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart provides insights into the average billing amount for different types of hospital admissions. Key observations include:\n\nAverage Billing Amount Differences: Each bar represents the average billing amount for a specific admission type, such as emergency, elective, or urgent admissions. The height of the bars indicates the relative cost, allowing easy comparison across admission types.\n\nKey Insights: Admission types with higher average billing (e.g., Emergency admissions) may reflect the complexity and urgency of the care provided. Lower billing amounts (e.g., Elective admissions) could be associated with planned or less intensive procedures.\n\nPractical Implications: This analysis can help hospitals and healthcare providers evaluate the cost structures associated with different admission types and plan resource allocation accordingly.\n\n\n\n## Comparison of Total Billing Amounts by Medication.\n\n```{r,fig.width=9}\n\n# Bar Plot: Total Billing Amount by Medication with Expanded Notations (Reversed Axes)\n# Group the healthcare data by the 'Medication' column and calculate the total billing amount for each medication.\nhealthcare_data %>%\n  group_by(Medication) %>%\n  summarise(total_billing = sum(Billing.Amount, na.rm = TRUE)) %>%  # Summing billing amounts, ignoring missing values\n\n  # Create a bar plot with 'Medication' on the x-axis and 'total_billing' on the y-axis.\n  ggplot(aes(x = Medication, y = total_billing, fill = Medication)) +\n  \n  # Add bar plot with black border and slight transparency.\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.8) +\n\n  # Add text labels above the bars showing the total billing amounts in formatted currency notation.\n  geom_text(\n    aes(label = scales::label_number(big.mark = \",\", prefix = \"$\")(total_billing)),\n    vjust = -0.3,  # Position labels slightly above the bars\n    color = \"black\", size = 3.5  # Set text color and size\n  ) +\n\n  # Use a visually distinct color palette for the bars.\n  scale_fill_brewer(palette = \"Dark2\") +\n\n  # Add titles and axis labels for clarity.\n  labs(\n    title = \"Total Billing Amount by Medication\",  # Title of the plot\n    x = \"Medication\",  # X-axis label\n    y = \"Total Billing Amount\",  # Y-axis label\n    fill = \"Medication\"  # Legend title\n  ) +\n\n  # Customize the theme for better appearance.\n  theme(\n    axis.text.x = element_text(hjust = 0.5, size = 11),  # Center-align and adjust font size for x-axis labels\n    axis.text.y = element_text(size = 11),  # Adjust font size for y-axis labels\n    plot.title = element_text(hjust = 0.5)  # Center-align the plot title\n  ) +\n\n  # Format the y-axis labels with commas, dollar signs, and full notation (accuracy of 1).\n  scale_y_continuous(\n    labels = scales::label_number(big.mark = \",\", prefix = \"$\", accuracy = 1),\n    expand = expansion(mult = c(0, 0.1))  # Add space at the top of the plot for text labels\n  )\n\n```\n\n## Interpretation of the Graph:\nPurpose of the Graph:\nThe graph visualizes the total billing amounts associated with different medications. Each bar represents a specific medication, and the height of the bar reflects its total billing amount.\n\nKey Observations:\nIbuprofen has the highest total billing amount ($283,784,867), indicating it may be the most commonly prescribed or the costliest medication overall.\nLipitor, Aspirin, Paracetamol, and Penicillin follow closely, with billing totals in a similar range.\nAll medications have billing amounts exceeding $279 million, suggesting a substantial financial impact across all categories.\n\nOverall Insight:\nThe graph highlights that the healthcare billing amounts are quite high across all medications. This may reflect widespread usage or high treatment costs associated with these medications. Further analysis could explore factors driving these costs, such as the frequency of prescriptions or the unit price of medications.\n\n## Machine Learning part\n\n```{r}\n# Select relevant columns and handle high cardinality in 'Hospital'\nhealthcare_data <- healthcare_data %>%\n  select(Age, Gender, Billing.Amount, Admission.Type, Insurance.Provider, Hospital, Test.Results) %>%\n  mutate(Hospital = as.factor(as.integer(as.factor(Hospital)) %% 100),  # Reduce levels by grouping\n         across(where(is.character), as.factor))\n\n# Split data into training and testing sets\nset.seed(123)\ndata_split <- initial_split(healthcare_data, prop = 0.8, strata = Test.Results)\ntrain_data <- training(data_split)\ntest_data <- testing(data_split)\n\n# Define a recipe for preprocessing\nrecipe_prep <- recipe(Test.Results ~ ., data = train_data) %>%\n  step_normalize(all_numeric_predictors()) %>%\n  step_dummy(all_nominal_predictors())\n\n\n```\n\n```{r}\n\n\n\n# Specify multinomial regression model with penalty\nmultinom_model <- multinom_reg(mode = \"classification\", penalty = 0.1) %>%\n  set_engine(\"glmnet\")\n\n# Specify random forest model with less number of trees in order to make the code run faster.\nrf_model <- rand_forest(trees = 30, mtry = 2, mode = \"classification\") %>%\n  set_engine(\"ranger\")\n\n# Create workflows\nmultinom_workflow <- workflow() %>%\n  add_model(multinom_model) %>%\n  add_recipe(recipe_prep)\n\nrf_workflow <- workflow() %>%\n  add_model(rf_model) %>%\n  add_recipe(recipe_prep)\n\n# Fit models\nset.seed(123)\nmultinom_fit <- fit(multinom_workflow, data = train_data)\nset.seed(123)\nrf_fit <- fit(rf_workflow, data = train_data)\n\n# Predict and evaluate\nmultinom_preds <- predict(multinom_fit, test_data, type = \"prob\") %>%\n  bind_cols(predict(multinom_fit, test_data), test_data) %>%\n  metrics(truth = Test.Results, estimate = .pred_class)\n\nrf_preds <- predict(rf_fit, test_data, type = \"prob\") %>%\n  bind_cols(predict(rf_fit, test_data), test_data) %>%\n  metrics(truth = Test.Results, estimate = .pred_class)\n\n# Combine metrics for comparison\ncomparison_metrics <- bind_rows(\n  multinom_preds %>% mutate(Model = \"Multinomial Regression\"),\n  rf_preds %>% mutate(Model = \"Random Forest\")\n)\n\n# Print metrics\ncomparison_metrics %>% select(Model, .metric, .estimate)\n\n\n\n\n```\n\n```         \n```\n\n```{r}\n\n# Plotting the Model's performance based on the accuracy scores.\n\ncomparison_metrics %>%\n  filter(.metric == \"accuracy\") %>%\n  ggplot(aes(x = Model, y = .estimate, fill = Model)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  geom_text(aes(label = scales::label_number(scale = 1)(.estimate)), \n            vjust = -0.5, size = 3.5) +  # Adjust vjust and size as needed\n  labs(title = \"Model Performance Comparison\", y = \"Accuracy\", x = \"Model\") +\n  scale_y_continuous(labels = scales::label_number(scale = 1), limits = c(0, 0.4))\n\n```\n\n## Interpretation\n \nThe low accuracy in my multinomial regression and random forest models might be due to factors like limited feature selection, imbalanced classes, or insufficient model tuning. To improve, I can take the following steps: First, I should enhance my features by creating more meaningful predictors. Second, I need to address any class imbalance using methods such as oversampling, undersampling, or adjusting class weights. Third, I should fine-tune my models by experimenting with different hyperparameters. Fourth, exploring ensemble techniques like boosting (e.g., XGBoost or LightGBM) may help achieve better performance. Lastly, ensuring thorough data preprocessing—by addressing missing values, outliers, and applying proper scaling—can significantly improve the models' accuracy.\n\n\n\n## Plot and text\n\n::::: columns\n::: {.column width=\"50%\"}\n-   Some text\n\n-   goes here\n:::\n\n::: {.column width=\"50%\"}\n```{r}\n```\n:::\n:::::\n\n# A new section...\n\n## Tables\n\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n## Images\n\n![Image credit: Danielle Navarro, Percolate.](images/watercolour_sys02_img34_teacup-ocean.png){fig-align=\"center\" width=\"500\"}\n\n## Math Expressions {.smaller}\n\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. \\$\\\\alpha+\\\\beta\\$ renders $\\alpha + \\beta$. You can use the display style with double dollar signs:\n\n```         \n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n```\n\n$$\n\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\n$$\n\nLimitations:\n\n1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;\n\n2.  There should not be spaces after the opening `$` or before the closing `$`.\n\n# Wrap up\n\n## Feeling adventurous?\n\n-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.\n\n-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: load-packages\n#| include: false\n\n# Load packages here\npacman::p_load(tidymodels,\n               tidyverse,\n               here,\n               viridis,\n               glmnet,\n               ggplot2,\n               ranger,\n               openintro, \n               ggridges,  \n               lubridate,\n               dplyr,\n               gridExtra,\n               GGally,\n               corrplot,\n               reshape2,\n               e1071,\n               randomForest,\n               caret,\n               gbm\n               )\n\n```\n\n```{r}\n#| label: setup\n#| include: false\n\n# Plot theme\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))\n\n# For better figure resolution\nknitr::opts_chunk$set(\n  fig.retina = 3, \n  dpi = 300, \n  fig.width = 6, \n  fig.asp = 0.618 \n  )\n```\n\n```{r}\n#| label: load-data\n#| include: false\nhealthcare_data <- read.csv(here(\"data\", \"healthcare_dataset.csv\"))\n\nglimpse(data)\n```\n\n# Using Quarto for presentations\n\n## Quarto\n\n-   The presentation is created using the Quarto CLI\n\n-   `##` sets the start of a new slide\n\n## Layouts\n\nYou can use plain text\n\n::::: columns\n::: {.column width=\"40%\"}\n-   or bullet points[^1]\n:::\n\n::: {.column width=\"60%\"}\nor in two columns\n:::\n:::::\n\n[^1]: And add footnotes\n\n-   like\n\n-   this\n\n## Code\n\n```{r, echo=FALSE}\n#Data Cleaning-(Explaination needed in markdown)\n\n# Check for missing values and remove rows with NAs\nhealthcare_data <- healthcare_data %>%\n  filter_all(all_vars(!is.na(.)))\n\n# Remove duplicate rows\nhealthcare_data <- healthcare_data %>%\n  distinct()\n\n# Check and print data types of columns\nstr(healthcare_data)\n\n# Convert 'Date of Admission' and 'Discharge Date' to datetime format\nhealthcare_data$Date.of.Admission <- ymd(healthcare_data$Date.of.Admission)\nhealthcare_data$Discharge.Date <- ymd(healthcare_data$Discharge.Date)\n\n# Verify changes\nstr(healthcare_data)\n\n```\n\n## Plots\n\n## Gender Distribution\n\n```{r}\n\n# 1. Univariate Analysis\n# Group data by Gender and count the number of occurrences for each gender\ngender_count <- healthcare_data %>% \n  group_by(Gender) %>% \n  summarise(count = n())  # Summarize the counts for each gender\n\n# Plot Gender Distribution\nggplot(gender_count, aes(x = Gender, y = count, fill = Gender)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\", width = 0.6) +  # Create bar chart with specified bar width\n  geom_text(aes(label = count), vjust = -0.2, color = \"black\", size = 4) +  # Add data labels above bars\n  labs(\n    title = \"Gender Distribution\",  # Set chart title\n    x = \"Gender\",  # Set x-axis label\n    y = \"Count\"  # Set y-axis label\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 30000, by = 5000),  # Set y-axis tick marks at intervals of 5000\n    limits = c(0, 30000)  # Set y-axis limits to ensure it reaches 30000\n  ) +\n  theme(\n    legend.position = \"none\",  # Remove legend\n    axis.title.x = element_blank()  # Remove x-axis title for a cleaner look\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe graph represents the gender distribution of a dataset. It shows the counts of individuals grouped by gender (Female and Male). The counts for each gender are labeled above the bars:\n\nFemale: 27,470 individuals. Male: 27,496 individuals. The counts are nearly equal, indicating a balanced gender distribution in the dataset.\n\n## Distribution of Medical Conditions\n\n```{r}\n\n# Group data by Medical Condition and calculate the count of each condition\ncondition_count <- healthcare_data %>% \n  group_by(Medical.Condition) %>% \n  summarise(count = n())  # Summarize the counts for each condition\n\n# Plot Medical Condition Distribution\nggplot(condition_count, aes(x = Medical.Condition, y = count, fill = Medical.Condition)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\", width = 0.6) +  # Create a bar chart with specified bar width\n  geom_text(aes(label = count), vjust = -0.2, color = \"black\", size = 3) +  # Add labels above bars\n  theme_minimal() +  # Apply minimal theme for a clean look\n  labs(\n    title = \"Distribution of Medical Conditions\",  # Set chart title\n    x = \"Medical Condition\",  # Set x-axis label\n    y = \"Count\"  # Set y-axis label\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 10000, by = 2500),  # Set y-axis breaks at intervals of 2500\n    limits = c(0, 10000)  # Set y-axis limits to ensure it reaches 10000\n  ) +\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis label positioning\n    legend.position = \"none\"  # Remove legend\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart depicts the distribution of various medical conditions in the dataset. The counts for each condition are labeled above the bars: Arthritis: 9,218 cases. Asthma: 9,095 cases. Cancer: 9,140 cases. Diabetes: 9,216 cases. Hypertension: 9,151 cases. Obesity: 9,146 cases. The data indicates that all medical conditions have nearly similar counts, suggesting an evenly distributed representation of conditions in the dataset.\n\n## Blood Type Distribution\n\n```{r}\n\n# 1. Prepare data: Count the occurrences of each blood type\nblood_type_count <- healthcare_data %>%\n  count(Blood.Type, sort = TRUE) %>%  # Count each blood type and sort in descending order\n  rename(Category = Blood.Type, Count = n)  # Rename columns for clarity\n\n# 2. Plot Blood Type Distribution with count as text on each bar\nggplot(blood_type_count, aes(x = reorder(Category, Count), y = Count, fill = Category)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\", show.legend = FALSE, width = 0.6) +  # Create horizontal bars\n  geom_text(aes(label = Count), hjust = -0.2, color = \"black\", size = 3) +  # Add text labels for counts\n  coord_flip() +  # Flip coordinates for a horizontal bar chart\n  labs(\n    title = \"Blood Type Distribution\",  # Set chart title\n    x = \"Blood Type\",  # Set x-axis label\n    y = \"Count\"  # Set y-axis label\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),  # Center-align and bold title\n    axis.title.x = element_text(face = \"bold\"),  # Bold x-axis title\n    axis.title.y = element_text(face = \"bold\"),  # Bold y-axis title\n    axis.text = element_text(size = 10),  # Set size of axis text\n    axis.text.x = element_text(vjust = 4, hjust = 0.5)  # Adjust x-axis text for clarity\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 8000, by = 2000),  # Set y-axis ticks at intervals of 2000\n    limits = c(0, 8000)  # Ensure y-axis limits reach 8000\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart represents the distribution of different blood types within the dataset. Each bar corresponds to a blood type, and the counts are displayed as text beside the bars: A-: 6,898 individuals A+: 6,896 individuals B+: 6,885 individuals AB+: 6,882 individuals AB-: 6,874 individuals B-: 6,872 individuals O+: 6,855 individuals O-: 6,804 individuals The data suggests that all blood types have relatively similar counts, with small variations. A- is the most frequent blood type, while O- is the least.\n\n## Test Results Distribution Plot\n\n```{r}\n\n# 1. Count occurrences of each test result category\ntest_results_count <- healthcare_data %>%\n  group_by(Test.Results) %>%  # Group data by 'Test.Results'\n  summarise(count = n())  # Count the occurrences of each test result category\n\n# 2. Plot the distribution of test results\nggplot(test_results_count, aes(x = Test.Results, y = count, fill = Test.Results)) +  # Define data and aesthetics\n  geom_bar(stat = \"identity\") +  # Create bars with height based on counts\n  geom_text(aes(label = count), vjust = -0.2, color = \"black\", size = 3.5) +  # Add count as text above each bar\n  labs(\n    title = \"Test Results Distribution\",  # Title of the chart\n    x = \"Test Results\",  # Label for the x-axis\n    y = \"Count\"  # Label for the y-axis\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 20000, by = 5000),  # Set y-axis ticks at intervals of 5000\n    limits = c(0, 20000)  # Set y-axis limits to accommodate data range\n  ) +\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5)  # Adjust x-axis text for better readability\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart displays the distribution of test results from the dataset. Each bar represents a category of test results, and the height indicates the count of occurrences for that category. The exact count is displayed on top of each bar for better readability.\n\nFrom the chart: It is possible to determine which test result category is most or least frequent. The y-axis is scaled to a maximum of 20,000, with intervals of 5,000, providing an appropriate scale for interpretation.\n\n## Age Group Distribution of Patients\n\n```{r}\n\n# Load the knitr package\nlibrary(knitr)  # For displaying the results in a neat table format\n\n# 1. Create Age Groups\nhealthcare_data <- healthcare_data %>%  # Modify the healthcare_data dataset\n  mutate(Age_Group = case_when(  # Add a new column 'Age_Group'\n    Age >= 0 & Age <= 18 ~ \"0-18\",  # Assign \"0-18\" for ages 0 to 18\n    Age >= 19 & Age <= 35 ~ \"19-35\",  # Assign \"19-35\" for ages 19 to 35\n    Age >= 36 & Age <= 50 ~ \"36-50\",  # Assign \"36-50\" for ages 36 to 50\n    Age >= 51 & Age <= 65 ~ \"51-65\",  # Assign \"51-65\" for ages 51 to 65\n    Age > 65 ~ \"65+\",  # Assign \"65+\" for ages above 65\n    TRUE ~ \"Unknown\"  # Assign \"Unknown\" for any other cases (e.g., missing or invalid data)\n  ))\n\n# 2. Count Patients in Each Age Group\nage_group_count <- healthcare_data %>%  # Use the modified dataset\n  group_by(Age_Group) %>%  # Group by the 'Age_Group' column\n  summarise(Count = n(), .groups = 'drop')  # Count the number of patients in each age group\n\n# 3. Display Results in a Table\ncat(\"### Age Group Distribution\\n\")  # Add a heading for the results\nknitr::kable(age_group_count, caption = \"Age Group Distribution of Patients\")  # Display the table neatly using knitr\n\n```\n\n## Interpretation of the Results\n\nThe table provides a summary of the distribution of patients across different age groups. The age groups are defined as: 0-18 years: Representing children and adolescents. 19-35 years: Representing young adults. 36-50 years: Representing middle-aged individuals. 51-65 years: Representing older adults nearing retirement age. 65+ years: Representing the elderly population. The counts in the table allow us to analyze which age group has the highest or lowest number of patients, helping identify trends in patient demographics. This can assist healthcare providers in tailoring age-specific services or interventions.\n\n## Age Distribution by Medical Condition\n\n```{r}\n# Multi-variate Analysis\n# Boxplot for Age by Medical Condition\n\nggplot(healthcare_data, aes(x = Medical.Condition, y = Age, fill = Medical.Condition)) +  # Map medical condition to x-axis, age to y-axis, and fill colors\n  geom_boxplot() +  # Add a boxplot to visualize the age distribution for each condition\n  \n  stat_summary(fun.y = \"mean\", geom = \"point\", shape = 3, size = 4, color = \"black\") +  # Add 'X' marker for mean age\n  theme_minimal() +  # Apply minimal theme for cleaner visuals\n  labs(\n    title = \"Age Distribution by Medical Condition\",  # Set the title\n    x = \"Medical Condition\",  # Label the x-axis\n    y = \"Age\"  # Label the y-axis\n  ) + \n  scale_y_continuous(\n    breaks = seq(0, 100, by = 25),  # Add y-axis ticks at intervals of 25\n    limits = c(0, 100)  # Set the y-axis range from 0 to 100\n  ) +  \n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis label position for readability\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),  # Center and bold the plot title\n    axis.title = element_text(face = \"bold\")  # Bold the axis titles\n  )\n\n```\n\n## Interpretation of the Graph\n\nThe boxplot represents the distribution of patients' ages across various medical conditions. Key insights include:\n\nBoxplot Details:\n\nThe box shows the interquartile range (IQR), representing the middle 50% of ages for each medical condition. The horizontal line inside the box represents the median age for each condition. Whiskers extend to the smallest and largest values within 1.5 times the IQR, and points outside these whiskers are considered outliers. Jittered Points:\n\nThe scatter points (jitter) overlay the boxplot to show individual patient ages, providing more granular data visibility. Mean Indication:\n\nA black 'X' marker (mean point) is added for each medical condition, offering a quick comparison of average age. General Trends:\n\nVariations in age distribution across medical conditions can indicate if specific conditions are more common among certain age groups. For example, conditions like arthritis or hypertension may have higher age medians compared to asthma or diabetes, which could indicate age-related trends.\n\n## Admission Type by Medical Condition\n\n```{r}\n\n# Count the number of occurrences of each combination of 'Medical.Condition' and 'Admission.Type'\ncondition_admission_count <- healthcare_data %>%\n  group_by(Medical.Condition, Admission.Type) %>%  # Group data by medical condition and admission type\n  summarise(count = n(), .groups = 'drop')  # Count the number of occurrences for each group\n\n# Plot using ggplot\nggplot(condition_admission_count, aes(x = Medical.Condition, y = count, fill = Admission.Type)) +  # Map variables for plotting\n  geom_bar(stat = \"identity\", position = \"dodge\") +  # Use grouped bar chart to separate bars by admission type\n  labs(\n    title = \"Admission Type by Medical Condition\",  # Add title to the graph\n    x = \"Medical Condition\",  # Label x-axis\n    y = \"Count\",  # Label y-axis\n    fill = \"Admission Type\"  # Legend title for the fill aesthetic\n  ) +\n  theme_minimal() +  # Use minimal theme for a clean appearance\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis text for better readability\n    plot.title = element_text(hjust = 0.5),  # Center-align the plot title\n    legend.position = \"top\"  # Position the legend at the top for easier interpretation\n  ) +\n  geom_text(\n    aes(label = count),  # Display counts on the bars\n    position = position_dodge(width = 0.8),  # Adjust text position to align with grouped bars\n    vjust = -0.3,  # Position text slightly above the bars\n    color = \"black\", size = 2.25  # Set text color and size for readability\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 3200, by = 800),  # Define y-axis breaks at intervals of 800\n    limits = c(0, 3200)  # Set y-axis range from 0 to 3200\n  )\n\n```\n\n## Interpretation of the Graph\n\nThis grouped bar chart visualizes the relationship between medical conditions and admission types, providing the following insights:\n\nAdmission Type Breakdown: For each medical condition, bars represent counts of different admission types (e.g., Emergency, Elective, or Urgent). The dodge position ensures clear separation between bars for easier comparison across admission types.\n\nKey Observations: Certain conditions like Hypertension or Diabetes may have higher counts for specific admission types, such as Emergency. Elective admissions may dominate planned medical conditions such as Obesity-related procedures. Urgent admissions might be fewer overall, reflecting their specialized and immediate nature.\n\nPractical Implications: Hospitals can use this data to allocate resources appropriately based on admission patterns for different conditions. Identifying conditions with higher emergency admissions can guide emergency preparedness.\n\n```{r}\n#NEW PLOT\n# Bar plot of count of patients for each doctor by hospital\n\n```\n\n## Medical Conditions by Blood Type\n\n```{r}\n\n# Count the number of occurrences of each combination of 'Blood.Type' and 'Medical.Condition'\nblood_condition_count <- healthcare_data %>%\n  group_by(Blood.Type, Medical.Condition) %>%  # Group data by blood type and medical condition\n  summarise(count = n(), .groups = 'drop')  # Count the number of occurrences for each group\n\n# Plot using ggplot\nggplot(blood_condition_count, aes(x = Blood.Type, y = count, fill = Medical.Condition)) +  # Map variables for plotting\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Use stacked bar chart to display medical conditions within each blood type\n  labs(\n    title = \"Medical Conditions by Blood Type\",  # Add title to the graph\n    x = \"Blood Type\",  # Label x-axis\n    y = \"Count\",  # Label y-axis\n    fill = \"Medical Condition\"  # Legend title for the fill aesthetic\n  ) +\n  theme_minimal() +  # Use minimal theme for a clean appearance\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis text for better readability\n    plot.title = element_text(hjust = 0.5),  # Center-align the plot title\n    legend.position = \"right\"  # Position the legend on the right side of the chart\n  ) +\n  geom_text(\n    aes(label = count),  # Display counts within the stacked bars\n    position = position_stack(vjust = 0.5),  # Position text at the center of each stack\n    color = \"black\", size = 2.5  # Set text color and size for readability\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 8000, by = 2000),  # Define y-axis breaks at intervals of 2000\n    limits = c(0, 8000)  # Set y-axis range from 0 to 8000\n  )\n\n```\n\n## Interpretation of the Graph\n\nThis stacked bar chart illustrates the distribution of medical conditions across different blood types, providing the following insights:\n\nBlood Type Analysis: The bars represent the total count of individuals for each blood type, with subdivisions indicating various medical conditions. The stacking highlights how medical conditions are distributed within each blood type.\n\nMedical Condition Contribution: Certain blood types (e.g., O+, A+) may show higher overall counts, reflecting their prevalence in the dataset. Specific medical conditions may dominate for certain blood types, indicating potential associations between medical conditions and blood types.\n\nKey Observations: Blood types such as O- or AB- might have lower overall counts, which aligns with their rarity in the general population. The composition of medical conditions within each blood type is relatively consistent, with a few exceptions.\n\nPractical Implications: This chart is useful for identifying whether certain blood types are more prone to specific medical conditions. Healthcare providers can use this data for personalized care, especially in conditions where blood type may have clinical relevance.\n\n## Yearly Revenue Summary and Validation\n\n```{r}\n\n# Ensure the Date.of.Admission column is in Date format\nhealthcare_data$Date.of.Admission <- as.Date(healthcare_data$Date.of.Admission, format = \"%Y-%m-%d\")  \n# Convert the Date.of.Admission column to Date format for accurate date-based operations.\n\n# Extract year from the Date.of.Admission column\nhealthcare_data <- healthcare_data %>%\n  mutate(Year = format(Date.of.Admission, \"%Y\"))  \n# Create a new column 'Year' to store the year extracted from Date.of.Admission.\n\n# Summarize revenue by year\nyearly_revenue <- healthcare_data %>%\n  group_by(Year) %>%  # Group data by year\n  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%  \n  # Calculate the total revenue for each year, ignoring missing values.\n  mutate(total_revenue_millions = total_revenue / 1e6)  \n  # Convert revenue values to millions for readability.\n\n# Print the summarized revenue to verify the calculation\nprint(yearly_revenue)  \n# Display the yearly revenue summary to verify results.\n\n# Verify conversion to millions\nhealthcare_data %>%\n  group_by(Year) %>%  # Group data by year\n  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE)) %>%  \n  # Recalculate total revenue for each year.\n  mutate(manual_check_millions = total_revenue / 1e6)  \n  # Manually verify the conversion to millions.\n\n```\n\n## Interpretation of the Code\n\nThis code calculates and validates the total yearly revenue from healthcare services based on patient admissions. The following insights are derived:\n\nDate Handling: The Date.of.Admission column is converted to the Date format to enable accurate date-based analysis. The Year is extracted from the admission dates to facilitate grouping and summarizing data by year.\n\nRevenue Calculation: The total revenue (Billing.Amount) is calculated for each year. Revenue values are converted to millions for easier interpretation and reporting.\n\nValidation: A manual check is included to validate the conversion of revenue to millions, ensuring accurate computations.\n\nPractical Utility: This information can help identify trends in revenue over the years, which may reflect changes in patient volume, service costs, or healthcare policies.\n\n## Yearly Revenue Trend Analysis\n\n```{r}\n\n# Ensure the Date.of.Admission column is in Date format\nhealthcare_data$Date.of.Admission <- as.Date(healthcare_data$Date.of.Admission, format = \"%Y-%m-%d\")  \n# Convert the 'Date.of.Admission' column to Date format to allow for correct date manipulation.\n\n# Extract year from the Date.of.Admission column\nhealthcare_data <- healthcare_data %>%\n  mutate(Year = format(Date.of.Admission, \"%Y\"))  \n# Create a new column 'Year' by extracting the year from the 'Date.of.Admission' column.\n\n# Summarize revenue by year\nyearly_revenue <- healthcare_data %>%\n  group_by(Year) %>%  # Group data by year\n  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%  \n  # Calculate the total revenue for each year, ignoring missing values with 'na.rm = TRUE'.\n  mutate(total_revenue_millions = total_revenue / 1e6)  \n  # Convert the total revenue into millions for better readability.\n\n# Plot the yearly revenue as a line graph\nggplot(yearly_revenue, aes(x = Year, y = total_revenue_millions, group = 1)) +\n  geom_line(color = \"blue\", size = 1) +  # Draw the line connecting points, color blue and size 1\n  geom_point(color = \"red\", size = 2) +  # Add red points to mark the actual data values\n  geom_text(aes(label = round(total_revenue_millions, 2)), hjust=1.2,vjust = -0.5, color = \"black\", size = 2.5) +  \n  # Add text labels with the exact revenue value rounded to 2 decimal places, positioned above the points\n  labs(title = \"Yearly Revenue in Millions\",  # Add title and axis labels\n       x = \"Year\", \n       y = \"Revenue (Millions)\") +\n  theme_minimal() +  # Use minimal theme for a clean look\n  theme(axis.text.x = element_text(size = 10),  # Customize x-axis label size for better readability\n        plot.title = element_text(hjust = 0.5)) +  # Center-align the plot title\n  scale_y_continuous(breaks = seq(0, 300, by = 60), limits = c(0, 300))  \n  # Adjust y-axis to show revenue in millions from 0 to 300 million with breaks every 60 million\n\n```\n\n## Interpretation of the Graph\n\nThe Yearly Revenue Trend line graph displays the total revenue (in millions) generated by healthcare services across different years. Here's what can be inferred: The blue line indicates the trend in total revenue over time, showing increases or decreases in revenue each year. Red points mark the revenue for each year, highlighting individual data points for clarity. Text labels above each red point provide the exact value of the revenue (in millions) for each corresponding year. The y-axis represents the revenue in millions, and the x-axis corresponds to the years. The overall trend in the graph could reveal periods of revenue growth, decline, or consistency, which may be linked to healthcare events, policy changes, or economic factors.\n\nThis graph can be used to assess financial performance over time, identify any significant changes, and inform decision-making for future strategies.\n\n## Research Questions: \n\n### RQ-1. How does total and average medical revenue vary across different age groups, and what is the proportional contribution of each age group to the overall medical revenue?\n\nThe analysis shows that older age groups, particularly those aged 65 and above, contribute the most to total medical revenue, generating $409.3M, or 29.2% of the overall revenue. This is followed by the 19–35, 51–65, and 36–50 age groups, which also make significant contributions. In contrast, the 0–18 age group accounts for only $23.7M, making up just 1.7% of the total revenue.\n\nInterestingly, the average medical revenue per person is fairly consistent across all age groups, ranging from $25.4K to $26.7K, with the 0–18 group having a slightly higher average despite its lower total contribution. This suggests that specialized or targeted medical services for younger individuals may drive higher per-person costs.\n\nThe pie chart further highlights the proportional revenue contributions, with older populations, particularly those aged 65+, dominating the share. The variability in medical expenditures is also evident from the box plot, with higher costs and outliers more common in older age groups like 51–65 and 65+.\n\nOverall, this analysis underscores the significant impact of older populations on healthcare revenue, reflecting their higher healthcare needs. It also suggests that younger age groups, while contributing less overall, might incur higher average costs due to specialized care. These insights can guide resource allocation and healthcare planning.\n\n\n\n## Total Medical Revenue by Age Group (in Millions)\n\n```{r}\n\n# Calculate total revenue per age group\nage_group_revenue <- healthcare_data %>%\n  group_by(Age_Group) %>%  # Group the data by Age_Group\n  summarise(Total_Revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%  \n  # Sum the billing amount for each age group, ignoring NA values with 'na.rm = TRUE'.\n  mutate(Total_Revenue_Million = Total_Revenue / 1e6)  # Convert the revenue into millions for readability\n\n# Display the results in a neat format using knitr\ncat(\"### Age Group Revenue Distribution (in Millions)\\n\")  \n# Print the heading for the table in markdown format\nknitr::kable(age_group_revenue, caption = \"Total Revenue by Age Group (in Millions)\")  \n# Display the summarized revenue per age group using knitr for neat tabular output\n\n# Create a bar plot for revenue distribution by age group with \"M\" suffix\nggplot(age_group_revenue, aes(x = Age_Group, y = Total_Revenue_Million, fill = Age_Group)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Create a bar plot with one bar for each age group\n  geom_text(aes(label = paste0(round(Total_Revenue_Million, 1), \"M\")),  # Add text labels above the bars\n            vjust = -0.5, color = \"black\", size = 3) +  # Adjust label position and appearance\n  labs(title = \"Total Medical Revenue by Age Group (in Millions)\",  # Add title and axis labels\n       x = \"Age Group\", \n       y = \"Total Revenue (in Millions)\") +\n  theme(axis.text.x = element_text(vjust = 4, hjust=0.5),  # Rotate x-axis labels for better readability\n        plot.title = element_text(hjust = 0.5)) +  # Center align the title\n  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = \"M\"), limits = c(0, 500))  \n  # Format the y-axis to show the revenue in millions, with a \"M\" suffix and a limit for clarity\n\n```\n\n## Interpretation of the Graph\n\nThe Total Medical Revenue by Age Group bar graph displays the sum of revenue generated by healthcare services, categorized by different age groups, with the values represented in millions. Here's what can be inferred: Each bar represents the total medical revenue (in millions) generated by patients within a particular age group. The labels on top of the bars indicate the exact revenue value in millions, with the \"M\" suffix added for clarity. Age Groups are represented on the x-axis, and the total revenue (in millions) is represented on the y-axis. The height of the bars shows how much revenue is generated by each age group, and the differences in bar heights indicate which age groups contribute the most to the total revenue. The graph helps in identifying which age groups are more lucrative for the healthcare system in terms of medical billing.\n\n## Proportion of Total Revenue by Age Group (in Millions)\n\n```{r}\n\n# Pie chart of Total Revenue by Age Group with Percentages\nggplot(age_group_revenue, aes(x = \"\", y = Total_Revenue_Million, fill = Age_Group)) +  # Create pie chart with filled segments based on Age Group\n  geom_bar(stat = \"identity\", width = 1) +  # Make the bars form a complete circle for the pie chart\n  coord_polar(theta = \"y\") +  # Convert the bar plot into a pie chart by polar coordinates\n  labs(title = \"Proportion of Total Revenue by Age Group (in Millions)\") +  # Add title to the chart\n  theme(axis.text.x = element_blank(),  # Remove x-axis labels since they are not needed for pie chart\n        plot.title = element_text(hjust = 0.5)) +  # Center the title\n  geom_text(aes(label = paste0(round(Total_Revenue_Million / sum(Total_Revenue_Million) * 100, 1), \"%\")), \n            position = position_stack(vjust = 0.5), color = \"white\")  # Add percentage labels inside each pie segment\n\n```\n\n## Interpretation of the Graph\n\nThe pie chart of Total Revenue by Age Group displays how the total revenue is distributed across various age groups. Here's the key interpretation: Each slice of the pie represents a different age group, and the size of the slice corresponds to the revenue generated by that age group (in millions). The percentage labels on the pie segments show what proportion of the total revenue is contributed by each age group. The percentage is calculated by dividing the revenue for a specific age group by the total revenue and multiplying by 100. Larger slices indicate age groups that contribute more to the overall revenue, while smaller slices represent age groups with a lower revenue contribution. The chart provides a visual comparison of revenue contributions from different age groups, making it easy to see which groups are the most lucrative.\n\n## Medical Expenditure by Age Group\n\n```{r}\n\n# Box plot: Medical Expenditure by Age Group\nggplot(healthcare_data, aes(x = Age_Group, y = Billing.Amount, fill = Age_Group)) +  # Create box plot with Billing Amount on y-axis and Age Group on x-axis\n  geom_boxplot() +  # Adds the box plot to visualize the distribution of medical expenditure\n  labs(\n    title = \"Medical Expenditure by Age Group\",  # Add the title of the plot\n    x = \"Age Group\",  # Label for x-axis\n    y = \"Medical Expenditure ($)\"  # Label for y-axis with dollar symbol\n  ) + \n  theme(\n    axis.text.x = element_text(vjust = 0.5),  # Adjust x-axis label positioning\n    plot.title = element_text(hjust = 0.5)  # Center title\n  ) +\n  scale_y_continuous(\n    labels = scales::label_number(big.mark = \",\", prefix = \"$\")  # Format y-axis labels with commas and dollar symbol\n  )\n\n\n```\n\n## Interpretation of the Graph\n\nThe box plot of Medical Expenditure by Age Group illustrates the distribution of medical expenditures across different age groups. Here's the key interpretation:\n\nBox Plots: Each box represents the distribution of medical expenditure for an age group. The top and bottom of the box represent the upper and lower quartiles (i.e., the 75th and 25th percentiles), with the line in the middle of the box representing the median (50th percentile).\n\nWhiskers: The lines extending from the boxes represent the range of the data, capturing values within 1.5 times the interquartile range from the quartiles. Data points outside this range are considered outliers and are plotted as individual dots.\n\nAge Group Comparisons: By looking at the boxes and their ranges, you can compare the median medical expenditures for different age groups. If an age group has a larger interquartile range, it indicates a greater variability in medical expenses within that group.\n\nInterpretation for Retirement: Higher expenditures in older age groups might suggest that people in these groups are more likely to need higher medical expenses in retirement. This can imply that fewer people in these age groups will be able to fully support themselves without medical insurance or additional support post-retirement.\n\n## Average Medical Revenue by Age Group (in Thousands)\n\n```{r}\n\n# Calculate average revenue per age group in thousands (K)\nage_group_avg_revenue <- healthcare_data %>%\n  group_by(Age_Group) %>%\n  summarise(Average_Revenue = mean(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%\n  mutate(Average_Revenue_K = Average_Revenue / 1e3)  # Convert to thousands (K)\n\n# Display the results in a neat format using knitr\ncat(\"### Age Group Average Revenue Distribution (in Thousands)\\n\")\nknitr::kable(age_group_avg_revenue, caption = \"Average Revenue by Age Group (in Thousands)\")\n\n# Create a bar plot for average revenue distribution by age group in K\nggplot(age_group_avg_revenue, aes(x = Age_Group, y = Average_Revenue_K, fill = Age_Group)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Creates bars based on average revenue\n  geom_text(aes(label = paste0(round(Average_Revenue_K, 1), \"K\")),  # Labels the bars with revenue in thousands\n            vjust = -0.5, color = \"black\", size = 3) +  # Adjusts label position\n  labs(title = \"Average Medical Revenue by Age Group (in Thousands)\",  # Title of the plot\n       x = \"Age Group\",  # X-axis label\n       y = \"Average Revenue (in K)\") +  # Y-axis label\n  theme(axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjusts x-axis labels for readability\n        plot.title = element_text(hjust = 0.5)) +  # Centers the title\n  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = \"K\"),limits = c(0, 30))  # Formats the y-axis in thousands and sets axis limits\n\n\n```\n\n## Interpretation of the Graph\n\nThe bar plot of Average Medical Revenue by Age Group (in Thousands) visualizes the average medical revenue (in thousands) generated from each age group. Here's the interpretation:\n\nBars: Each bar represents the average revenue for a given age group. The height of the bar reflects how much, on average, each age group contributes to the total medical revenue. The values are displayed in thousands (K) for better readability.\n\nAge Group Insights: By observing the height of the bars, we can compare how different age groups contribute to medical revenue on average. Age groups with higher bars contribute significantly more to medical revenue, while age groups with lower bars contribute less.\n\nRevenue Distribution: The chart helps to identify which age groups generate the most medical revenue on average, which may be valuable for understanding healthcare utilization patterns and planning medical services and resources for different age groups.\n\n\n\n###  RQ-2. What factors contribute most to higher billing amounts? Importance: Insights here can inform healthcare cost optimization and insurance claimprocesses.\n\nThe factors contributing most to higher billing amounts, based on the provided graphs and analysis, include:\n\nAdmission Type: Emergency and urgent admissions have slightly higher average billing amounts compared to elective admissions. This reflects the additional complexity and immediacy of care associated with unplanned or critical treatments.\n\nAge Group: Older populations, particularly those aged 65+, generate the highest total billing amounts due to increased healthcare needs and more frequent utilization of medical services.\n\nMedications: High total billing amounts are observed for widely used or essential medications like Ibuprofen, Lipitor, and Aspirin, indicating their frequent prescription or high associated costs.\n\nThese insights are crucial for healthcare providers and insurers to optimize costs by focusing on improving efficiency in emergency care, targeting preventive measures for older age groups, and evaluating the cost-effectiveness of commonly prescribed medications.\n\n\n## Average Billing Amount by Admission Type\n\n```{r}\n\n# Calculate average billing by Admission Type\nbilling_by_admission <- healthcare_data %>%\n  group_by(Admission.Type) %>%  # Group data by admission type\n  summarise(mean_billing = mean(Billing.Amount, na.rm = TRUE))  # Calculate the mean billing amount for each group, ignoring missing values\n\n# Plot average billing amount by Admission Type\nggplot(billing_by_admission, aes(x = Admission.Type, y = mean_billing, fill = Admission.Type)) +  # Map admission type to x-axis and mean billing to y-axis\n  geom_bar(stat = \"identity\") +  # Use bar chart to show mean billing\n  geom_text(\n    aes(label = scales::label_number(big.mark = \",\", accuracy = 0.01, prefix = \"$\")(mean_billing)),  # Display formatted mean billing with commas and 2 decimals\n    vjust = -0.3,  # Adjust vertical positioning of the labels above the bars\n    color = \"black\", size = 3  # Set text color and size\n  ) +\n  labs(\n    title = \"Average Billing Amount by Admission Type\",  # Add title to the graph\n    x = \"Admission Type\",  # Label the x-axis\n    y = \"Average Billing Amount ($)\"  # Label the y-axis with currency symbol\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 30000, by = 10000),  # Define y-axis breaks at intervals of 10,000\n    limits = c(0, 30000),  # Set the y-axis range from 0 to 30,000\n    labels = scales::label_number(big.mark = \",\", accuracy = 0.01, prefix = \"$\")  # Format y-axis labels with commas and 2 decimals\n  ) +\n  theme(\n    axis.text.x = element_text(vjust = 4, hjust = 0.5)  # Adjust x-axis text positioning for better readability\n  )\n\n\n```\n\n## Interpretation of the Graph\n\nThe bar chart provides insights into the average billing amount for different types of hospital admissions. Key observations include:\n\nAverage Billing Amount Differences: Each bar represents the average billing amount for a specific admission type, such as emergency, elective, or urgent admissions. The height of the bars indicates the relative cost, allowing easy comparison across admission types.\n\nKey Insights: Admission types with higher average billing (e.g., Emergency admissions) may reflect the complexity and urgency of the care provided. Lower billing amounts (e.g., Elective admissions) could be associated with planned or less intensive procedures.\n\nPractical Implications: This analysis can help hospitals and healthcare providers evaluate the cost structures associated with different admission types and plan resource allocation accordingly.\n\n\n\n## Comparison of Total Billing Amounts by Medication.\n\n```{r,fig.width=9}\n\n# Bar Plot: Total Billing Amount by Medication with Expanded Notations (Reversed Axes)\n# Group the healthcare data by the 'Medication' column and calculate the total billing amount for each medication.\nhealthcare_data %>%\n  group_by(Medication) %>%\n  summarise(total_billing = sum(Billing.Amount, na.rm = TRUE)) %>%  # Summing billing amounts, ignoring missing values\n\n  # Create a bar plot with 'Medication' on the x-axis and 'total_billing' on the y-axis.\n  ggplot(aes(x = Medication, y = total_billing, fill = Medication)) +\n  \n  # Add bar plot with black border and slight transparency.\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.8) +\n\n  # Add text labels above the bars showing the total billing amounts in formatted currency notation.\n  geom_text(\n    aes(label = scales::label_number(big.mark = \",\", prefix = \"$\")(total_billing)),\n    vjust = -0.3,  # Position labels slightly above the bars\n    color = \"black\", size = 3.5  # Set text color and size\n  ) +\n\n  # Use a visually distinct color palette for the bars.\n  scale_fill_brewer(palette = \"Dark2\") +\n\n  # Add titles and axis labels for clarity.\n  labs(\n    title = \"Total Billing Amount by Medication\",  # Title of the plot\n    x = \"Medication\",  # X-axis label\n    y = \"Total Billing Amount\",  # Y-axis label\n    fill = \"Medication\"  # Legend title\n  ) +\n\n  # Customize the theme for better appearance.\n  theme(\n    axis.text.x = element_text(hjust = 0.5, size = 11),  # Center-align and adjust font size for x-axis labels\n    axis.text.y = element_text(size = 11),  # Adjust font size for y-axis labels\n    plot.title = element_text(hjust = 0.5)  # Center-align the plot title\n  ) +\n\n  # Format the y-axis labels with commas, dollar signs, and full notation (accuracy of 1).\n  scale_y_continuous(\n    labels = scales::label_number(big.mark = \",\", prefix = \"$\", accuracy = 1),\n    expand = expansion(mult = c(0, 0.1))  # Add space at the top of the plot for text labels\n  )\n\n```\n\n## Interpretation of the Graph:\nPurpose of the Graph:\nThe graph visualizes the total billing amounts associated with different medications. Each bar represents a specific medication, and the height of the bar reflects its total billing amount.\n\nKey Observations:\nIbuprofen has the highest total billing amount ($283,784,867), indicating it may be the most commonly prescribed or the costliest medication overall.\nLipitor, Aspirin, Paracetamol, and Penicillin follow closely, with billing totals in a similar range.\nAll medications have billing amounts exceeding $279 million, suggesting a substantial financial impact across all categories.\n\nOverall Insight:\nThe graph highlights that the healthcare billing amounts are quite high across all medications. This may reflect widespread usage or high treatment costs associated with these medications. Further analysis could explore factors driving these costs, such as the frequency of prescriptions or the unit price of medications.\n\n## Machine Learning part\n\n```{r}\n# Select relevant columns and handle high cardinality in 'Hospital'\nhealthcare_data <- healthcare_data %>%\n  select(Age, Gender, Billing.Amount, Admission.Type, Insurance.Provider, Hospital, Test.Results) %>%\n  mutate(Hospital = as.factor(as.integer(as.factor(Hospital)) %% 100),  # Reduce levels by grouping\n         across(where(is.character), as.factor))\n\n# Split data into training and testing sets\nset.seed(123)\ndata_split <- initial_split(healthcare_data, prop = 0.8, strata = Test.Results)\ntrain_data <- training(data_split)\ntest_data <- testing(data_split)\n\n# Define a recipe for preprocessing\nrecipe_prep <- recipe(Test.Results ~ ., data = train_data) %>%\n  step_normalize(all_numeric_predictors()) %>%\n  step_dummy(all_nominal_predictors())\n\n\n```\n\n```{r}\n\n\n\n# Specify multinomial regression model with penalty\nmultinom_model <- multinom_reg(mode = \"classification\", penalty = 0.1) %>%\n  set_engine(\"glmnet\")\n\n# Specify random forest model with less number of trees in order to make the code run faster.\nrf_model <- rand_forest(trees = 30, mtry = 2, mode = \"classification\") %>%\n  set_engine(\"ranger\")\n\n# Create workflows\nmultinom_workflow <- workflow() %>%\n  add_model(multinom_model) %>%\n  add_recipe(recipe_prep)\n\nrf_workflow <- workflow() %>%\n  add_model(rf_model) %>%\n  add_recipe(recipe_prep)\n\n# Fit models\nset.seed(123)\nmultinom_fit <- fit(multinom_workflow, data = train_data)\nset.seed(123)\nrf_fit <- fit(rf_workflow, data = train_data)\n\n# Predict and evaluate\nmultinom_preds <- predict(multinom_fit, test_data, type = \"prob\") %>%\n  bind_cols(predict(multinom_fit, test_data), test_data) %>%\n  metrics(truth = Test.Results, estimate = .pred_class)\n\nrf_preds <- predict(rf_fit, test_data, type = \"prob\") %>%\n  bind_cols(predict(rf_fit, test_data), test_data) %>%\n  metrics(truth = Test.Results, estimate = .pred_class)\n\n# Combine metrics for comparison\ncomparison_metrics <- bind_rows(\n  multinom_preds %>% mutate(Model = \"Multinomial Regression\"),\n  rf_preds %>% mutate(Model = \"Random Forest\")\n)\n\n# Print metrics\ncomparison_metrics %>% select(Model, .metric, .estimate)\n\n\n\n\n```\n\n```         \n```\n\n```{r}\n\n# Plotting the Model's performance based on the accuracy scores.\n\ncomparison_metrics %>%\n  filter(.metric == \"accuracy\") %>%\n  ggplot(aes(x = Model, y = .estimate, fill = Model)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  geom_text(aes(label = scales::label_number(scale = 1)(.estimate)), \n            vjust = -0.5, size = 3.5) +  # Adjust vjust and size as needed\n  labs(title = \"Model Performance Comparison\", y = \"Accuracy\", x = \"Model\") +\n  scale_y_continuous(labels = scales::label_number(scale = 1), limits = c(0, 0.4))\n\n```\n\n## Interpretation\n \nThe low accuracy in my multinomial regression and random forest models might be due to factors like limited feature selection, imbalanced classes, or insufficient model tuning. To improve, I can take the following steps: First, I should enhance my features by creating more meaningful predictors. Second, I need to address any class imbalance using methods such as oversampling, undersampling, or adjusting class weights. Third, I should fine-tune my models by experimenting with different hyperparameters. Fourth, exploring ensemble techniques like boosting (e.g., XGBoost or LightGBM) may help achieve better performance. Lastly, ensuring thorough data preprocessing—by addressing missing values, outliers, and applying proper scaling—can significantly improve the models' accuracy.\n\n\n\n## Plot and text\n\n::::: columns\n::: {.column width=\"50%\"}\n-   Some text\n\n-   goes here\n:::\n\n::: {.column width=\"50%\"}\n```{r}\n```\n:::\n:::::\n\n# A new section...\n\n## Tables\n\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n## Images\n\n![Image credit: Danielle Navarro, Percolate.](images/watercolour_sys02_img34_teacup-ocean.png){fig-align=\"center\" width=\"500\"}\n\n## Math Expressions {.smaller}\n\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. \\$\\\\alpha+\\\\beta\\$ renders $\\alpha + \\beta$. You can use the display style with double dollar signs:\n\n```         \n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n```\n\n$$\n\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\n$$\n\nLimitations:\n\n1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;\n\n2.  There should not be spaces after the opening `$` or before the closing `$`.\n\n# Wrap up\n\n## Feeling adventurous?\n\n-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.\n\n-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"presentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.57","auto-stretch":true,"title":"Predicting Healthcare Service Demands Using Simulated Data for Advanced Analytics","subtitle":"INFO 526 - Fall 2023 - Project 1","author":"Anirudh Koganti, John Kang, Sai Hemanth, Shashank Kohade, Chaitanya Konda, Giridhar Kotha, Rohith","title-slide-attributes":{"data-background-image":"images/watercolour_sys02_img34_teacup-ocean.jpg","data-background-size":"stretch","data-background-opacity":"0.7","data-slide-number":"none"},"editor":"visual","theme":["data/customtheming.scss"]}}},"projectFormats":["html"]}