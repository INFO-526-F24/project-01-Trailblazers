---
title: "Predicting Healthcare Service Demands Using Simulated Data for Advanced Analytics"
subtitle: "INFO 526 - Fall 2023 - Project 1"
author: "Anirudh Koganti, John Kang, Sai Hemanth, Shashank Kohade, Chaitanya Konda, Giridhar Kotha, Rohith"
title-slide-attributes:
  data-background-image: images/watercolour_sys02_img34_teacup-ocean.jpg
  data-background-size: stretch
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
  
editor: visual
execute:
  echo: false
---

```{r}
#| label: load-packages
#| include: false

# Load packages here
pacman::p_load(tidymodels,
               tidyverse,
               here,
               viridis, 
               ggplot2,
               openintro, 
               ggridges,  
               lubridate,
               dplyr,
               gridExtra,
               GGally,
               corrplot,
               reshape2)

```

```{r}
#| label: setup
#| include: false

# Plot theme
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 6, 
  fig.asp = 0.618 
  )
```

```{r}
#| label: load-data
#| include: false
healthcare_data <- read.csv(here("data", "healthcare_dataset.csv"))

glimpse(data)
```

# Using Quarto for presentations

## Quarto

-   The presentation is created using the Quarto CLI

-   `##` sets the start of a new slide

## Layouts

You can use plain text

::: columns
::: {.column width="40%"}
-   or bullet points[^1]
:::

::: {.column width="60%"}
or in two columns
:::
:::

[^1]: And add footnotes

-   like

-   this

## Code

```{r, echo=FALSE}
#Data Cleaning-(Explaination needed in markdown)

# Check for missing values and remove rows with NAs
healthcare_data <- healthcare_data %>%
  filter_all(all_vars(!is.na(.)))

# Remove duplicate rows
healthcare_data <- healthcare_data %>%
  distinct()

# Check and print data types of columns
str(healthcare_data)

# Convert 'Date of Admission' and 'Discharge Date' to datetime format
healthcare_data$Date.of.Admission <- ymd(healthcare_data$Date.of.Admission)
healthcare_data$Discharge.Date <- ymd(healthcare_data$Discharge.Date)

# Verify changes
str(healthcare_data)

```

## Plots

```{r}
# 1. Univariate Analysis
# Gender count
gender_count <- healthcare_data %>% 
  group_by(Gender) %>% 
  summarise(count = n())

# Plot Gender Distribution
ggplot(gender_count, aes(x = Gender, y = count, fill = Gender)) +
  geom_bar(stat = "identity", width = 0.6) +  # Adjust bar width
  geom_text(aes(label = count), vjust = -0.2, color = "black", size = 4) +  # Adjust label positioning
  labs(title = "Gender Distribution", x = "Gender", y = "Count") +
  scale_y_continuous(breaks = seq(0, 30000, by = 5000), limits = c(0, 30000)) +  # Ensure y-axis reaches 30000
  theme(
    legend.position = "none",
    axis.title.x = element_blank()
)
```

```{r}
# Count of different medical conditions
condition_count <- healthcare_data %>% 
  group_by(Medical.Condition) %>% 
  summarise(count = n())

# Plot Medical Condition Distribution
ggplot(condition_count, aes(x = Medical.Condition, y = count, fill = Medical.Condition)) +
  geom_bar(stat = "identity", width = 0.6) +  # Adjust bar width
  geom_text(aes(label = count), vjust = -0.2, color = "black", size = 3) +  # Adjust label positioning and size
  theme_minimal() +
  labs(title = "Distribution of Medical Conditions", x = "Medical Condition", y = "Count") +
  scale_y_continuous(breaks = seq(0, 10000, by = 2500), limits = c(0, 10000)) +  # Add y-axis breaks and limits
  theme(
    axis.text.x = element_text(vjust=4, hjust = 0.5),  # Rotate x-axis labels
    legend.position = "none"  # Removelegend
)
```

```{r}
blood_type_count <- healthcare_data %>%
  count(Blood.Type, sort = TRUE) %>%
  rename(Category = Blood.Type, Count = n)

# Plot Blood Type Distribution with count as text on each bar
ggplot(blood_type_count, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
  geom_bar(stat = "identity", show.legend = FALSE, width = 0.6) +  # Adjust width for better appearance
  geom_text(aes(label = Count), hjust = -0.2, color = "black", size = 3) +  # Add count as text
  coord_flip() +  # Flip coordinates for horizontal bars
  labs(title = "Blood Type Distribution", x = "Blood Type", y = "Count") +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),  # Center and bold title
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold"),
    axis.text = element_text(size=10),
    axis.text.x = element_text(vjust=4, hjust = 0.5)
)+scale_y_continuous(breaks = seq(0, 8000, by = 2000), limits = c(0, 8000)) 
```

```{r}
# Count of Test Results
test_results_count <- healthcare_data %>%
  group_by(Test.Results) %>%
  summarise(count = n())

# Plot Test Results Distribution
ggplot(test_results_count, aes(x = Test.Results, y = count, fill = Test.Results)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = count), vjust = -0.2, color = "black", size = 3.5) +  # Adjust label positioning
  labs(title = "Test Results Distribution", x = "Test Results", y = "Count") +scale_y_continuous(breaks = seq(0, 20000, by = 5000), limits = c(0, 20000)) + theme(axis.text.x = element_text(vjust=4, hjust = 0.5))
```

```{r}
library(knitr)

# Create age groups
healthcare_data <- healthcare_data %>%
  mutate(Age_Group = case_when(
    Age >= 0 & Age <= 18 ~ "0-18",
    Age >= 19 & Age <= 35 ~ "19-35",
    Age >= 36 & Age <= 50 ~ "36-50",
    Age >= 51 & Age <= 65 ~ "51-65",
    Age > 65 ~ "65+",
    TRUE ~ "Unknown"
  ))

# Count the number of patients in each age group
age_group_count <- healthcare_data %>%
  group_by(Age_Group) %>%
  summarise(Count = n(), .groups = 'drop')

# Use knitr to display the results in a neat format
cat("### Age Group Distribution\n")
knitr::kable(age_group_count, caption = "Age Group Distribution of Patients")
```

```{r}
#Multi-variate Analysis
# Boxplot for Age by Medical Condition with adjusted bar size
ggplot(healthcare_data, aes(x = Medical.Condition, y = Age, fill = Medical.Condition)) +
  geom_boxplot() +  # Adjusted width for smaller boxplot size
  geom_jitter(aes(color = Medical.Condition), alpha = 0.5, size = 1) +  # Jittered points for better visualization
  stat_summary(fun.y = "mean", geom = "point", shape = 3, size = 4, color = "black") +  # Mean points
  theme_minimal() +
  labs(title = "Age Distribution by Medical Condition", x = "Medical Condition", y = "Age") + 
  scale_y_continuous(breaks = seq(0, 100, by = 25), limits = c(0, 100)) +  # Y-axis breaks and limits
  theme(axis.text.x = element_text(vjust = 4, hjust = 0.5),  # Adjust x-axis text positioning
        plot.title = element_text(hjust = 0.5, face = "bold"),  # Center and bold the title
        axis.title = element_text(face = "bold"))  # Boldaxistitles

```

```{r}
# Calculate average billing by Admission Type
billing_by_admission <- healthcare_data %>%
  group_by(Admission.Type) %>%
  summarise(mean_billing = mean(Billing.Amount, na.rm = TRUE))

# Plot average billing amount by Admission Type
ggplot(billing_by_admission, aes(x = Admission.Type, y = mean_billing, fill = Admission.Type)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = round(mean_billing, 2)), vjust = -0.3, color = "black", size = 4) +  # Adjusted text positioning
  labs(title = "Average Billing Amount by Admission Type", x = "Admission Type", y = "Average Billing Amount") +scale_y_continuous(breaks = seq(0, 30000, by = 10000), limits = c(0, 30000)) +  # Add y-axis breaks
  theme(axis.text.x = element_text(vjust=4, hjust = 0.5))
```

```{r}
# Count the number of occurrences of each combination of 'Medical.Condition' and 'Admission.Type'
# Count the number of occurrences of each combination of 'Medical.Condition' and 'Admission.Type'
condition_admission_count <- healthcare_data %>%
  group_by(Medical.Condition, Admission.Type) %>%
  summarise(count = n(), .groups = 'drop')

# Plot using ggplot
ggplot(condition_admission_count, aes(x = Medical.Condition, y = count, fill = Admission.Type)) +
  geom_bar(stat = "identity", position = "dodge") +
    # Light colors
  labs(title = "Admission Type by Medical Condition", 
       x = "Medical Condition", 
       y = "Count",
       fill = "Admission Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(vjust=4,hjust = 0.5),  # Center the x-axis labels without rotation
        plot.title = element_text(hjust = 0.5),  # Center the title
        legend.position = "top") +  # Position legend at the top
  theme(plot.margin = margin(1, 1, 1, 1)) +  # Adjust margins if needed
  geom_text(aes(label = count), position = position_dodge(width = 0.8), vjust = -0.3, color = "black", size = 2.25)+scale_y_continuous(breaks = seq(0, 3200, by = 800), limits = c(0, 3200)) 
```

```{r}
# Count the number of occurrences of each combination of 'Blood.Type' and 'Medical.Condition'
blood_condition_count <- healthcare_data %>%
  group_by(Blood.Type, Medical.Condition) %>%
  summarise(count = n(), .groups = 'drop')

# Plot using ggplot
ggplot(blood_condition_count, aes(x = Blood.Type, y = count, fill = Medical.Condition)) +
  geom_bar(stat = "identity", position = "stack") +  # Stack the bars for each medical condition
  labs(title = "Medical Conditions by Blood Type", 
       x = "Blood Type", 
       y = "Count",
       fill = "Medical Condition") +
  theme_minimal() +
  theme(axis.text.x = element_text(vjust=4,hjust = 0.5),  # Center the x-axis labels without rotation
        plot.title = element_text(hjust = 0.5),  # Center the title
        legend.position = "right") +  # Position the legend on the right side
  theme(plot.margin = margin(1, 1, 1, 1)) +  # Adjust margins if needed
  geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "black", size = 2.5)+scale_y_continuous(breaks = seq(0, 8000, by = 2000), limits = c(0, 8000)) 
```

```{r}
# Ensure the Date.of.Admission column is in Date format
healthcare_data$Date.of.Admission <- as.Date(healthcare_data$Date.of.Admission, format = "%Y-%m-%d")

# Extract year from the Date.of.Admission column
healthcare_data <- healthcare_data %>%
  mutate(Year = format(Date.of.Admission, "%Y"))  # Extract year

# Summarize revenue by year
yearly_revenue <- healthcare_data %>%
  group_by(Year) %>%
  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%
  mutate(total_revenue_millions = total_revenue / 1e6)  # Convert revenue to millions

# Print the summarized revenue to verify the calculation
print(yearly_revenue)

# Verify conversion to millions
healthcare_data %>%
  group_by(Year) %>%
  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE)) %>%
  mutate(manual_check_millions = total_revenue / 1e6)  # Recalculate millions manually
```

```{r}
# Ensure the Date.of.Admission column is in Date format
healthcare_data$Date.of.Admission <- as.Date(healthcare_data$Date.of.Admission, format = "%Y-%m-%d")

# Extract year from the Date.of.Admission column
healthcare_data <- healthcare_data %>%
  mutate(Year = format(Date.of.Admission, "%Y"))  # Extract year

# Summarize revenue by year
yearly_revenue <- healthcare_data %>%
  group_by(Year) %>%
  summarise(total_revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%
  mutate(total_revenue_millions = total_revenue / 1e6)  # Convert revenue to millions

# Plot the yearly revenue as a line graph
ggplot(yearly_revenue, aes(x = Year, y = total_revenue_millions, group = 1)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "red", size = 2) +
  geom_text(aes(label = round(total_revenue_millions, 2)), hjust=1.2,vjust = -0.5, color = "black", size = 2.5) +  # Position text above the point
  labs(title = "Yearly Revenue in Millions",
       x = "Year",
       y = "Revenue (Millions)") +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 10),  # Customize x-axis label size
        plot.title = element_text(hjust = 0.5)) +scale_y_continuous(breaks = seq(0, 300, by = 60), limits = c(0, 300)) 
```

```{r}
# Calculate total revenue per age group
age_group_revenue <- healthcare_data %>%
  group_by(Age_Group) %>%
  summarise(Total_Revenue = sum(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Total_Revenue_Million = Total_Revenue / 1e6)  # Convert to millions

# Display the results in a neat format using knitr
cat("### Age Group Revenue Distribution (in Millions)\n")
knitr::kable(age_group_revenue, caption = "Total Revenue by Age Group (in Millions)")

# Create a bar plot for revenue distribution by age group with "M" suffix
ggplot(age_group_revenue, aes(x = Age_Group, y = Total_Revenue_Million, fill = Age_Group)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  geom_text(aes(label = paste0(round(Total_Revenue_Million, 1), "M")), 
            vjust = -0.5, color = "black", size = 3) +
  labs(title = "Total Medical Revenue by Age Group (in Millions)",
       x = "Age Group",
       y = "Total Revenue (in Millions)") +
  theme(axis.text.x = element_text(vjust = 4, hjust=0.5),  # Rotate x-axis labels for readability
        plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = "M"),limits = c(0, 500))  # Add "M" suffix to y-axis

  
```

```{r}
# Pie chart of Total Revenue by Age Group
# Pie chart of Total Revenue by Age Group with Percentages
ggplot(age_group_revenue, aes(x = "", y = Total_Revenue_Million, fill = Age_Group)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  labs(title = "Proportion of Total Revenue by Age Group (in Millions)") +
  theme(axis.text.x = element_blank(), 
        plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = paste0(round(Total_Revenue_Million / sum(Total_Revenue_Million) * 100, 1), "%")),
            position = position_stack(vjust = 0.5), color = "white")

```

```{r}
#RQ-2-How many people will be able to support themselves with medical treatment after retirement

#Comparison of Medical Expenditure by Age Group
# Box plot: Medical Expenditure by Age Group
ggplot(healthcare_data, aes(x = Age_Group, y = Billing.Amount, fill = Age_Group)) +
  geom_boxplot() +
  labs(title = "Medical Expenditure by Age Group",
       x = "Age Group",
       y = "Medical Expenditure") +
  theme(axis.text.x = element_text(vjust = 0.5), plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(labels = scales::comma)

```

```{r}
# Calculate average revenue per age group in thousands (K)
age_group_avg_revenue <- healthcare_data %>%
  group_by(Age_Group) %>%
  summarise(Average_Revenue = mean(Billing.Amount, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Average_Revenue_K = Average_Revenue / 1e3)  # Convert to thousands (K)

# Display the results in a neat format using knitr
cat("### Age Group Average Revenue Distribution (in Thousands)\n")
knitr::kable(age_group_avg_revenue, caption = "Average Revenue by Age Group (in Thousands)")

# Create a bar plot for average revenue distribution by age group in K
ggplot(age_group_avg_revenue, aes(x = Age_Group, y = Average_Revenue_K, fill = Age_Group)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  geom_text(aes(label = paste0(round(Average_Revenue_K, 1), "K")), 
            vjust = -0.5, color = "black", size = 3) +
  labs(title = "Average Medical Revenue by Age Group (in Thousands)",
       x = "Age Group",
       y = "Average Revenue (in K)") +
  theme(axis.text.x = element_text(vjust = 4, hjust=0.5),  # Adjust x-axis labels for readability
        plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = "K"),limits = c(0, 30))

#write the content accordingly as justification for q-2

```

```{r}
#Machine Learning part
```

```         
```

```         
```

## Plot and text

::: columns
::: {.column width="50%"}
-   Some text

-   goes here
:::

::: {.column width="50%"}
```{r}
```
:::
:::

# A new section...

## Tables

If you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,

## Images

![Image credit: Danielle Navarro, Percolate.](images/watercolour_sys02_img34_teacup-ocean.png){fig-align="center" width="500"}

## Math Expressions {.smaller}

You can write LaTeX math expressions inside a pair of dollar signs, e.g. \$\\alpha+\\beta\$ renders $\alpha + \beta$. You can use the display style with double dollar signs:

```         
$$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$
```

$$
\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i
$$

Limitations:

1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;

2.  There should not be spaces after the opening `$` or before the closing `$`.

# Wrap up

## Feeling adventurous?

-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.

-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.
